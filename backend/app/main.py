"""
BIUAI - Sistema Financeiro Inteligente
API Principal constru√≠da com FastAPI seguindo as melhores pr√°ticas de 2024

Funcionalidades:
- Autentica√ß√£o JWT avan√ßada
- Rate limiting e seguran√ßa
- Monitoramento e m√©tricas
- Logging estruturado
- Documenta√ß√£o autom√°tica
- Cache inteligente
- Valida√ß√£o robusta
"""

import os
import asyncio
from contextlib import asynccontextmanager
from typing import Dict, Any

from fastapi import FastAPI, Request, Depends
from fastapi.staticfiles import StaticFiles
from fastapi.responses import JSONResponse, HTMLResponse
from fastapi.openapi.docs import (
    get_redoc_html,
    get_swagger_ui_html,
    get_swagger_ui_oauth2_redirect_html,
)
from fastapi.openapi.utils import get_openapi

from app.core.config import settings
from app.database import init_db, close_db
from app.middleware import setup_middleware, setup_exception_handlers
from app.api.v1.api import api_router
from app.core.security import SecurityAudit


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan events"""
    # Startup
    print("üöÄ Iniciando BIUAI API...")
    
    # Initialize database
    await init_db()
    print("‚úÖ Banco de dados inicializado")
    
    # Log startup
    SecurityAudit.log_security_event(
        "application_startup",
        details={
            "environment": settings.ENVIRONMENT,
            "version": settings.PROJECT_VERSION,
            "debug": settings.DEBUG
        }
    )
    
    yield
    
    # Shutdown
    print("üõë Finalizando BIUAI API...")
    
    # Close database connections
    await close_db()
    print("‚úÖ Conex√µes de banco fechadas")
    
    # Log shutdown
    SecurityAudit.log_security_event(
        "application_shutdown",
        details={"environment": settings.ENVIRONMENT}
    )


# Create FastAPI application
app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.PROJECT_VERSION,
    description="""
    ## BIUAI - Sistema Financeiro Inteligente üè¶
    
    API completa para gest√£o financeira pessoal e empresarial com intelig√™ncia artificial.
    
    ### Funcionalidades Principais:
    * üîê **Autentica√ß√£o JWT** - Sistema seguro de login e registro
    * üí∞ **Gest√£o de Lan√ßamentos** - Controle completo de receitas e despesas  
    * üìä **Categorias Inteligentes** - Classifica√ß√£o autom√°tica com ML
    * üéØ **Metas Financeiras** - Defini√ß√£o e acompanhamento de objetivos
    * üìà **Dashboards** - Visualiza√ß√µes e relat√≥rios interativos
    * ü§ñ **IA Financeira** - Insights e recomenda√ß√µes personalizadas
    * üì± **API RESTful** - Integra√ß√£o com aplica√ß√µes m√≥veis e web
    
    ### Tecnologias:
    * **FastAPI** - Framework web moderno e perform√°tico
    * **PostgreSQL** - Banco de dados robusto e escal√°vel
    * **Redis** - Cache e sess√µes em tempo real
    * **JWT** - Autentica√ß√£o segura e stateless
    * **SQLAlchemy** - ORM avan√ßado com async/await
    * **Machine Learning** - Classifica√ß√£o e predi√ß√µes autom√°ticas
    
    ### Seguran√ßa:
    * Rate limiting por IP
    * Headers de seguran√ßa obrigat√≥rios
    * Valida√ß√£o rigorosa de dados
    * Auditoria de a√ß√µes
    * Criptografia de senhas com bcrypt
    * Tokens JWT com expira√ß√£o configur√°vel
    
    ---
    **Desenvolvido por:** Equipe BIUAI  
    **Ambiente:** {environment}  
    **Vers√£o:** {version}
    """.format(
        environment=settings.ENVIRONMENT,
        version=settings.PROJECT_VERSION
    ),
    openapi_url=f"{settings.API_V1_STR}/openapi.json",
    docs_url=None,  # Disabled, we'll use custom
    redoc_url=None,  # Disabled, we'll use custom
    swagger_ui_oauth2_redirect_url="/docs/oauth2-redirect",
    lifespan=lifespan,
    contact={
        "name": "BIUAI Support",
        "email": "suporte@biuai.com",
        "url": "https://biuai.com/suporte"
    },
    license_info={
        "name": "Proprietary",
        "url": "https://biuai.com/licenca"
    },
    terms_of_service="https://biuai.com/termos"
)

# Setup middleware
setup_middleware(app)

# Setup exception handlers
setup_exception_handlers(app)

# Include API routes
app.include_router(api_router, prefix=settings.API_V1_STR)


# Health Check Endpoint
@app.get("/", response_model=Dict[str, Any], tags=["System"])
async def root() -> Dict[str, Any]:
    """
    Endpoint raiz da API - Informa√ß√µes do sistema
    """
    return {
        "message": "üè¶ BIUAI - Sistema Financeiro Inteligente",
        "version": settings.PROJECT_VERSION,
        "status": "online",
        "environment": settings.ENVIRONMENT,
        "documentation": "/docs",
        "api_version": "v1",
        "features": [
            "Autentica√ß√£o JWT",
            "Gest√£o Financeira",
            "Machine Learning",
            "API RESTful",
            "Monitoramento",
            "Cache Inteligente"
        ],
        "endpoints": {
            "docs": "/docs",
            "redoc": "/redoc", 
            "openapi": f"{settings.API_V1_STR}/openapi.json",
            "health": "/health",
            "metrics": "/metrics"
        }
    }


# Custom Documentation Pages
@app.get("/docs", include_in_schema=False)
async def custom_swagger_ui_html():
    """Custom Swagger UI with enhanced styling"""
    return get_swagger_ui_html(
        openapi_url=app.openapi_url,
        title=f"{app.title} - Documenta√ß√£o",
        oauth2_redirect_url=app.swagger_ui_oauth2_redirect_url,
        swagger_js_url="https://cdn.jsdelivr.net/npm/swagger-ui-dist@4.15.5/swagger-ui-bundle.js",
        swagger_css_url="https://cdn.jsdelivr.net/npm/swagger-ui-dist@4.15.5/swagger-ui.css",
        swagger_favicon_url="/static/favicon.ico",
        swagger_ui_parameters={
            "deepLinking": True,
            "displayRequestDuration": True,
            "docExpansion": "list",
            "operationsSorter": "alpha",
            "filter": True,
            "tagsSorter": "alpha",
            "tryItOutEnabled": True,
            "displayOperationId": False,
            "showExtensions": True,
            "showCommonExtensions": True,
            "persistAuthorization": True,
            "layout": "BaseLayout"
        }
    )


@app.get("/redoc", include_in_schema=False)
async def redoc_html():
    """Custom ReDoc documentation"""
    return get_redoc_html(
        openapi_url=app.openapi_url,
        title=f"{app.title} - Documenta√ß√£o",
        redoc_js_url="https://cdn.jsdelivr.net/npm/redoc@2.1.3/bundles/redoc.standalone.js",
        redoc_favicon_url="/static/favicon.ico",
    )


@app.get(app.swagger_ui_oauth2_redirect_url, include_in_schema=False)
async def swagger_ui_redirect():
    """OAuth2 redirect for Swagger UI"""
    return get_swagger_ui_oauth2_redirect_html()


def custom_openapi():
    """Custom OpenAPI schema with enhanced metadata"""
    if app.openapi_schema:
        return app.openapi_schema
    
    openapi_schema = get_openapi(
        title=app.title,
        version=app.version,
        description=app.description,
        routes=app.routes,
        contact=app.contact,
        license_info=app.license_info,
        terms_of_service=app.terms_of_service
    )
    
    # Force OpenAPI 3.0.0 for Swagger UI compatibility
    openapi_schema["openapi"] = "3.0.0"
    
    # Enhanced security schemes
    openapi_schema["components"]["securitySchemes"] = {
        "HTTPBearer": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT",
            "description": "Token JWT obtido atrav√©s do endpoint de login"
        },
        "APIKey": {
            "type": "apiKey",
            "in": "header",
            "name": "X-API-Key",
            "description": "Chave de API para integra√ß√µes"
        }
    }
    
    # Add custom info
    openapi_schema["info"]["x-logo"] = {
        "url": "/static/images/biuai-logo.svg",
        "altText": "BIUAI Logo"
    }
    
    # Add servers information
    openapi_schema["servers"] = [
        {
            "url": f"http://localhost:3000",
            "description": "Servidor de Desenvolvimento"
        },
        {
            "url": f"https://api.biuai.com",
            "description": "Servidor de Produ√ß√£o"
        }
    ]
    
    # Add tags metadata
    openapi_schema["tags"] = [
        {
            "name": "System",
            "description": "Endpoints do sistema - sa√∫de, m√©tricas e informa√ß√µes"
        },
        {
            "name": "Authentication", 
            "description": "Autentica√ß√£o e autoriza√ß√£o de usu√°rios"
        },
        {
            "name": "Users",
            "description": "Gerenciamento de usu√°rios e perfis"
        },
        {
            "name": "Lancamentos",
            "description": "Gest√£o de lan√ßamentos financeiros (receitas e despesas)"
        },
        {
            "name": "Categorias",
            "description": "Categorias de lan√ßamentos financeiros"
        },
        {
            "name": "Metas",
            "description": "Metas e objetivos financeiros"
        },
        {
            "name": "Analytics",
            "description": "Relat√≥rios e an√°lises financeiras"
        },
        {
            "name": "ML",
            "description": "Endpoints de machine learning e IA"
        }
    ]
    
    app.openapi_schema = openapi_schema
    return app.openapi_schema


# Set custom OpenAPI
app.openapi = custom_openapi


# Static files (if needed)
if os.path.exists("app/static"):
    app.mount("/static", StaticFiles(directory="app/static"), name="static")


# Enhanced startup message
@app.on_event("startup")
async def startup_message():
    """Display enhanced startup information"""
    print("\n" + "="*60)
    print("üè¶ BIUAI - Sistema Financeiro Inteligente")
    print("="*60)
    print(f"üìä Vers√£o: {settings.PROJECT_VERSION}")
    print(f"üåç Ambiente: {settings.ENVIRONMENT}")
    print(f"üîß Debug: {settings.DEBUG}")
    print(f"üöÄ Servidor: http://localhost:3000")
    print(f"üìö Documenta√ß√£o: http://localhost:3000/docs")
    print(f"‚ö° API: http://localhost:3000{settings.API_V1_STR}")
    print(f"üîç M√©tricas: http://localhost:3000/metrics")
    print(f"üíì Health: http://localhost:3000/health")
    print("="*60)
    
    if settings.ENVIRONMENT == "development":
        print("‚ö†Ô∏è  MODO DESENVOLVIMENTO - N√ÉO USE EM PRODU√á√ÉO!")
        print("="*60)
    
    print("‚úÖ Sistema pronto para uso!")
    print("\n")


# Custom error pages
@app.exception_handler(404)
async def custom_404_handler(request: Request, exc):
    """Custom 404 error page"""
    return JSONResponse(
        status_code=404,
        content={
            "detail": "Endpoint n√£o encontrado",
            "message": "A rota solicitada n√£o existe nesta API",
            "suggestion": "Verifique a documenta√ß√£o em /docs",
            "available_endpoints": [
                "/docs - Documenta√ß√£o",
                "/health - Status do sistema", 
                "/metrics - M√©tricas de performance",
                f"{settings.API_V1_STR}/auth/login - Login",
                f"{settings.API_V1_STR}/auth/register - Registro"
            ]
        }
    )


@app.exception_handler(405)
async def custom_405_handler(request: Request, exc):
    """Custom 405 method not allowed"""
    return JSONResponse(
        status_code=405,
        content={
            "detail": "M√©todo n√£o permitido",
            "message": f"O m√©todo {request.method} n√£o √© permitido para {request.url.path}",
            "suggestion": "Verifique a documenta√ß√£o para os m√©todos HTTP aceitos"
        }
    )


# Graceful shutdown handler
@app.on_event("shutdown")
async def shutdown_event():
    """Graceful shutdown procedures"""
    print("\nüõë Iniciando shutdown graceful...")
    
    # Wait a bit for ongoing requests
    await asyncio.sleep(1)
    
    print("‚úÖ Shutdown conclu√≠do com sucesso!")


if __name__ == "__main__":
    import uvicorn
    
    # Development server configuration
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=3000,
        reload=settings.DEBUG,
        log_level="info" if settings.DEBUG else "warning",
        access_log=settings.DEBUG,
        use_colors=True,
        server_header=False,
        date_header=False
    ) 