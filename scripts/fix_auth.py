#!/usr/bin/env python3
"""
Script para corrigir credenciais de autentica√ß√£o do BIUAI
Atualiza senhas e cria usu√°rios de teste necess√°rios
"""

import os
import sys
import psycopg2
from passlib.context import CryptContext
from datetime import datetime

# Configura√ß√£o de criptografia (mesmo padr√£o usado no backend)
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def hash_password(password: str) -> str:
    """Gera hash bcrypt da senha"""
    return pwd_context.hash(password)

def create_connection():
    """Cria conex√£o com o banco PostgreSQL"""
    try:
        conn = psycopg2.connect(
            host="localhost",
            port="5432",
            database="biuai",
            user="biuai",
            password="biuai123"
        )
        return conn
    except Exception as e:
        print(f"‚ùå Erro ao conectar com o banco: {e}")
        return None

def update_user_password(conn, email: str, password: str, description: str):
    """Atualiza a senha de um usu√°rio"""
    try:
        cursor = conn.cursor()
        hashed_password = hash_password(password)
        
        cursor.execute(
            "UPDATE users SET hashed_password = %s, updated_at = %s WHERE email = %s",
            (hashed_password, datetime.now(), email)
        )
        
        if cursor.rowcount > 0:
            print(f"‚úÖ {description}: senha atualizada")
        else:
            print(f"‚ö†Ô∏è  {description}: usu√°rio n√£o encontrado")
        
        conn.commit()
        cursor.close()
        
    except Exception as e:
        print(f"‚ùå Erro ao atualizar {description}: {e}")

def create_demo_user(conn):
    """Cria usu√°rio demo se n√£o existir"""
    try:
        cursor = conn.cursor()
        
        # Verificar se usu√°rio demo existe
        cursor.execute("SELECT id FROM users WHERE email = %s", ('demo@biuai.com',))
        if cursor.fetchone():
            print("‚ÑπÔ∏è  Usu√°rio demo j√° existe")
            cursor.close()
            return
        
        # Criar usu√°rio demo
        hashed_password = hash_password('demo123')
        cursor.execute("""
            INSERT INTO users (full_name, email, hashed_password, is_active, is_superuser, created_at, updated_at)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
        """, (
            'Usu√°rio Demo',
            'demo@biuai.com', 
            hashed_password,
            True,
            False,
            datetime.now(),
            datetime.now()
        ))
        
        print("‚úÖ Usu√°rio demo criado com sucesso")
        conn.commit()
        cursor.close()
        
    except Exception as e:
        print(f"‚ùå Erro ao criar usu√°rio demo: {e}")

def show_credentials():
    """Mostra as credenciais atualizadas"""
    print("\n" + "="*60)
    print("üîë CREDENCIAIS DE ACESSO ATUALIZADAS")
    print("="*60)
    print("üìß ADMINISTRADOR:")
    print("   Email: admin@biuai.com")
    print("   Senha: admin123")
    print("")
    print("üß™ USU√ÅRIO DEMO (Bot√£o 'Testar Sistema'):")
    print("   Email: demo@biuai.com")
    print("   Senha: demo123")
    print("")
    print("üåê Acesso: http://localhost:8080/login")
    print("="*60)

def main():
    print("üîß Iniciando corre√ß√£o de credenciais BIUAI...")
    print("üìç Conectando ao banco de dados...")
    
    conn = create_connection()
    if not conn:
        sys.exit(1)
    
    try:
        # Atualizar senha do admin para uma senha mais √≥bvia
        print("\nüîÑ Atualizando credenciais...")
        update_user_password(conn, 'admin@biuai.com', 'admin123', 'Administrador')
        
        # Criar usu√°rio demo
        create_demo_user(conn)
        
        # Mostrar credenciais finais
        show_credentials()
        
        print("\n‚úÖ Corre√ß√£o conclu√≠da com sucesso!")
        
    except Exception as e:
        print(f"‚ùå Erro durante a execu√ß√£o: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    main() 