#!/bin/bash

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

warning() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# Verifica se o Docker est√° rodando
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        error "Docker n√£o est√° rodando. Por favor, inicie o Docker primeiro."
        exit 1
    fi
    log "‚úì Docker est√° rodando"
}

# Verifica espa√ßo em disco
check_disk_space() {
    local available_space=$(df / | awk 'NR==2 {print $4}')
    local min_space=2000000  # 2GB em KB
    
    if [ "$available_space" -lt "$min_space" ]; then
        warning "Espa√ßo em disco baixo ($(($available_space/1024/1024))GB dispon√≠vel). Recomendado: 2GB+)"
    else
        log "‚úì Espa√ßo em disco suficiente ($(($available_space/1024/1024))GB dispon√≠vel)"
    fi
}

# Verifica se um container est√° rodando
check_container() {
    if [ "$(docker ps -q -f name=$1)" ]; then
        return 0
    else
        return 1
    fi
}

# Fun√ß√£o para verificar a sa√∫de de um servi√ßo
check_service_health() {
    local service=$1
    local port=$2
    local endpoint=$3
    local max_attempts=30
    local attempt=1

    while [ $attempt -le $max_attempts ]; do
        if curl -s --max-time 5 "http://localhost:${port}${endpoint}" > /dev/null 2>&1; then
            log "‚úì Servi√ßo $service est√° respondendo na porta $port"
            return 0
        fi
        info "Tentativa $attempt/$max_attempts - Aguardando servi√ßo $service inicializar..."
        sleep 2
        ((attempt++))
    done

    error "‚ùå Servi√ßo $service n√£o est√° respondendo ap√≥s $max_attempts tentativas"
    return 1
}

# Limpa environment anterior
cleanup_environment() {
    log "Limpando ambiente anterior..."
    
    # Para todos os containers do projeto
    docker-compose down --remove-orphans --volumes > /dev/null 2>&1
    
    # Remove imagens √≥rf√£s do projeto
    docker images --filter "dangling=true" -q | head -10 | xargs -r docker rmi > /dev/null 2>&1
    
    # Limpa volumes n√£o utilizados (cuidado com volumes importantes)
    docker volume prune -f > /dev/null 2>&1
    
    # Limpa cache do build se necess√°rio
    docker builder prune -f > /dev/null 2>&1
    
    log "‚úì Ambiente limpo"
}

# Verifica depend√™ncias do frontend
check_frontend_dependencies() {
    log "Verificando depend√™ncias do frontend..."
    
    if [ ! -f "frontend/package.json" ]; then
        error "package.json n√£o encontrado no frontend"
        return 1
    fi
    
    # Verifica se vue-countup-v3 est√° no package.json
    if ! grep -q "vue-countup-v3" frontend/package.json; then
        warning "Depend√™ncia vue-countup-v3 n√£o encontrada. Pode causar erro de build."
        return 1
    fi
    
    log "‚úì Depend√™ncias do frontend verificadas"
    return 0
}

# For√ßa rebuild do frontend se necess√°rio
force_frontend_rebuild() {
    log "For√ßando rebuild do frontend..."
    
    # Remove node_modules se existir no container
    docker-compose run --rm frontend sh -c "rm -rf node_modules package-lock.json" > /dev/null 2>&1
    
    # Rebuild sem cache
    docker-compose build --no-cache frontend
    
    if [ $? -eq 0 ]; then
        log "‚úì Frontend reconstru√≠do com sucesso"
        return 0
    else
        error "‚ùå Falha na reconstru√ß√£o do frontend"
        return 1
    fi
}

# Diret√≥rio do projeto
PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
cd "$PROJECT_DIR"

# Verifica se o arquivo docker-compose.yml existe
if [ ! -f "docker-compose.yml" ]; then
    error "docker-compose.yml n√£o encontrado em $PROJECT_DIR"
    exit 1
fi

# Cria diret√≥rio de logs se n√£o existir
mkdir -p logs

# Nome do arquivo de log
LOG_FILE="logs/startup_$(date +'%Y%m%d_%H%M%S').log"

# Fun√ß√£o para capturar e analisar erros
analyze_build_error() {
    local service=$1
    local log_file=$2
    
    if grep -q "vue-countup-v3" "$log_file"; then
        error "Erro de depend√™ncia: vue-countup-v3 n√£o encontrada"
        error "Solu√ß√£o: Execute 'cd frontend && npm install vue-countup-v3'"
        return 1
    fi
    
    if grep -q "ENOSPC" "$log_file"; then
        error "Erro de espa√ßo em disco insuficiente"
        error "Solu√ß√£o: Libere espa√ßo em disco ou limpe cache do Docker"
        return 1
    fi
    
    if grep -q "network" "$log_file"; then
        error "Erro de rede durante build"
        error "Solu√ß√£o: Verifique sua conex√£o com a internet"
        return 1
    fi
    
    return 0
}

# Inicia os servi√ßos
start_services() {
    log "Iniciando os servi√ßos BIUAI..."
    
    # Verifica depend√™ncias primeiro
    if ! check_frontend_dependencies; then
        warning "Problemas nas depend√™ncias detectados. Tentando corrigir..."
        if ! force_frontend_rebuild; then
            error "N√£o foi poss√≠vel corrigir as depend√™ncias. Verifique manualmente."
            exit 1
        fi
    fi
    
    cleanup_environment
    
    # Construir e iniciar os containers
    log "Construindo e iniciando containers..."
    
    # Tenta build normal primeiro
    if ! timeout 300 docker-compose up --build -d >> "$LOG_FILE" 2>&1; then
        error "Erro ao iniciar containers na primeira tentativa"
        
        # Analisa o erro
        analyze_build_error "frontend" "$LOG_FILE"
        
        # Tenta rebuild for√ßado do frontend
        warning "Tentando rebuild for√ßado do frontend..."
        if force_frontend_rebuild; then
            log "Tentando iniciar novamente ap√≥s rebuild..."
            if ! timeout 300 docker-compose up -d >> "$LOG_FILE" 2>&1; then
                error "Erro persistente ao iniciar containers. Verifique o log em $LOG_FILE"
                exit 1
            fi
        else
            error "Falha no rebuild. Verifique o log em $LOG_FILE"
            exit 1
        fi
    fi
    
    log "Aguardando servi√ßos iniciarem..."
    sleep 20

    # Verifica banco de dados
    info "Verificando PostgreSQL..."
    if ! check_container "biuai-db-1" && ! check_container "biuai_db_1"; then
        error "Banco de dados n√£o iniciou corretamente"
        docker-compose logs db >> "$LOG_FILE"
        exit 1
    fi
    log "‚úì PostgreSQL est√° rodando"

    # Verifica Redis
    info "Verificando Redis..."
    if ! check_container "biuai-redis-1" && ! check_container "biuai_redis_1"; then
        error "Redis n√£o iniciou corretamente"
        docker-compose logs redis >> "$LOG_FILE"
        exit 1
    fi
    log "‚úì Redis est√° rodando"

    # Verifica backend
    info "Verificando Backend..."
    if ! check_service_health "backend" "3000" "/health"; then
        error "Backend n√£o iniciou corretamente"
        docker-compose logs backend >> "$LOG_FILE"
        exit 1
    fi

    # Verifica model-server
    info "Verificando Model Server..."
    if ! check_service_health "model-server" "8000" "/health"; then
        error "Model Server n√£o iniciou corretamente"
        docker-compose logs model-server >> "$LOG_FILE"
        exit 1
    fi

    # Verifica frontend
    info "Verificando Frontend..."
    if ! check_service_health "frontend" "8080" "/"; then
        error "Frontend n√£o iniciou corretamente"
        docker-compose logs frontend >> "$LOG_FILE"
        exit 1
    fi

    # Verifica Ollama (pode demorar mais para carregar modelos)
    info "Verificando Ollama (pode demorar para carregar modelos)..."
    local ollama_attempts=60
    local attempt=1
    while [ $attempt -le $ollama_attempts ]; do
        if curl -s --max-time 10 "http://localhost:11434/api/version" > /dev/null 2>&1; then
            log "‚úì Ollama est√° rodando na porta 11434"
            break
        fi
        if [ $attempt -eq $ollama_attempts ]; then
            warning "‚ùå Ollama pode n√£o estar completamente inicializado, mas continuando..."
        fi
        info "Tentativa $attempt/$ollama_attempts - Aguardando Ollama inicializar..."
        sleep 5
        ((attempt++))
    done

    # Verifica MCP Services
    info "Verificando MCP Memory Service..."
    if ! check_service_health "mcp-memory" "8001" "/health"; then
        warning "‚ùå MCP Memory Service n√£o iniciou corretamente (n√£o cr√≠tico)"
        docker-compose logs mcp-memory-server >> "$LOG_FILE"
    fi

    info "Verificando MCP Chatbot Service..."
    if ! check_service_health "mcp-chatbot" "8002" "/health"; then
        warning "‚ùå MCP Chatbot Service n√£o iniciou corretamente (n√£o cr√≠tico)"
        docker-compose logs mcp-chatbot-service >> "$LOG_FILE"
    fi

    # Verifica outros servi√ßos opcionais
    info "Verificando servi√ßos opcionais..."
    optional_services=("jupyter" "pgadmin")
    for service in "${optional_services[@]}"; do
        if check_container "biuai-${service}-1" || check_container "biuai_${service}_1"; then
            log "‚úì Servi√ßo $service est√° rodando"
        else
            warning "‚ùå Servi√ßo $service n√£o est√° rodando (opcional)"
        fi
    done
}

# Fun√ß√£o para mostrar status dos servi√ßos
show_service_status() {
    echo ""
    echo -e "${CYAN}üìä Status dos Servi√ßos:${NC}"
    echo ""
    
    services=("frontend:8080" "backend:3000" "db:5432" "redis:6379" "model-server:8000" "ollama:11434" "mcp-memory-server:8001" "mcp-chatbot-service:8002")
    
    for service_port in "${services[@]}"; do
        IFS=':' read -r service port <<< "$service_port"
        if check_container "biuai-${service}-1" || check_container "biuai_${service}_1"; then
            echo -e "${GREEN}‚úì${NC} $service (porta $port)"
        else
            echo -e "${RED}‚úó${NC} $service (porta $port)"
        fi
    done
}

# Fun√ß√£o principal
main() {
    echo -e "${PURPLE}"
    echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  "
    echo "‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïî‚ïê‚ñà‚ñà‚ñà‚ñà‚ïó "
    echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë "
    echo "‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë    ‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù   ‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë "
    echo "‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù "
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù      ‚ïö‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  "
    echo -e "${NC}"
    echo ""
    
    log "Iniciando Sistema BIUAI v2.0..."
    info "Log detalhado ser√° salvo em: $LOG_FILE"
    
    check_docker
    check_disk_space
    start_services
    
    # Exibe URLs de acesso
    echo ""
    log "üéâ Sistema BIUAI iniciado com sucesso!"
    echo ""
    echo -e "${GREEN}üì± URLs de Acesso:${NC}"
    echo -e "${GREEN}Frontend (Dashboard):${NC} http://localhost:8080"
    echo -e "${GREEN}Backend API:${NC} http://localhost:3000"
    echo -e "${GREEN}API Docs (Swagger):${NC} http://localhost:3000/docs"
    echo -e "${GREEN}API Docs (Redoc):${NC} http://localhost:3000/redoc"
    echo -e "${GREEN}Model Server:${NC} http://localhost:8000"
    echo -e "${GREEN}Jupyter Lab:${NC} http://localhost:8888"
    echo -e "${GREEN}PgAdmin:${NC} http://localhost:5050"
    echo ""
    echo -e "${GREEN}ü§ñ Servi√ßos MCP:${NC}"
    echo -e "${GREEN}Ollama API:${NC} http://localhost:11434"
    echo -e "${GREEN}MCP Chatbot:${NC} http://localhost:8002"
    echo -e "${GREEN}MCP Memory:${NC} http://localhost:8001"
    echo ""
    echo -e "${GREEN}üîß Comandos √öteis:${NC}"
    echo -e "  ${CYAN}Ver logs:${NC} docker-compose logs -f [servi√ßo]"
    echo -e "  ${CYAN}Parar sistema:${NC} docker-compose down"
    echo -e "  ${CYAN}Restart servi√ßo:${NC} docker-compose restart [servi√ßo]"
    echo -e "  ${CYAN}Status completo:${NC} docker-compose ps"
    echo ""
    
    show_service_status
    
    echo ""
    log "Sistema pronto para uso! üöÄ"
    echo -e "${YELLOW}üí° Dica: Se algum servi√ßo falhar, verifique os logs com 'docker-compose logs [servi√ßo]'${NC}"
}

# Captura sinais para cleanup
trap 'echo -e "\n${YELLOW}Encerrando...${NC}"; exit 0' INT TERM

# Executa fun√ß√£o principal
main "$@" 